# Stubs for pandas.core.indexes.multi (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-import,unused-argument,invalid-name,redefined-builtin
# pylint: disable=too-few-public-methods,function-redefined
# pylint: disable=redefined-outer-name,too-many-ancestors,super-init-not-called
# pylint: disable=too-many-arguments,abstract-method,disallowed-name
# pylint: disable=arguments-differ,c-extension-no-member
from typing import Any, Optional

from pandas._libs import index as libindex
from pandas.core.indexes.base import Index


class MultiIndexUIntEngine(
        libindex.BaseMultiIndexCodesEngine,
        libindex.UInt64Engine):
    ...


class MultiIndexPyIntEngine(
        libindex.BaseMultiIndexCodesEngine,
        libindex.ObjectEngine):
    ...


class MultiIndex(Index):
    rename: Any = ...

    def __new__(
            cls, levels: Optional[Any] = ..., codes: Optional[Any] = ...,
            sortorder: Optional[Any] = ..., names: Optional[Any] = ...,
            dtype: Optional[Any] = ..., copy: bool = ...,
            name: Optional[Any] = ..., verify_integrity: bool = ...,
            _set_identity: bool = ...) -> Any:
        ...

    @classmethod
    def from_arrays(
            cls, arrays: Any, sortorder: Optional[Any] = ...,
            names: Optional[Any] = ...) -> Any:
        ...

    @classmethod
    def from_tuples(
            cls, tuples: Any, sortorder: Optional[Any] = ...,
            names: Optional[Any] = ...) -> Any:
        ...

    @classmethod
    def from_product(
            cls, iterables: Any, sortorder: Optional[Any] = ...,
            names: Optional[Any] = ...) -> Any:
        ...

    @classmethod
    def from_frame(
            cls, df: Any, sortorder: Optional[Any] = ...,
            names: Optional[Any] = ...) -> Any:
        ...

    @property
    def levels(self) -> Any:
        ...

    def set_levels(
            self, levels: Any, level: Optional[Any] = ...,
            inplace: bool = ..., verify_integrity: bool = ...) -> Any:
        ...

    @property
    def codes(self) -> Any:
        ...

    @property
    def labels(self) -> Any:
        ...

    def set_labels(
            self, labels: Any, level: Optional[Any] = ...,
            inplace: bool = ..., verify_integrity: bool = ...) -> Any:
        ...

    def set_codes(
            self, codes: Any, level: Optional[Any] = ...,
            inplace: bool = ..., verify_integrity: bool = ...) -> Any:
        ...

    def __array__(self, dtype: Optional[Any] = ...) -> Any:
        ...

    def view(self, cls: Optional[Any] = ...) -> Any:
        ...

    def __contains__(self, key: Any) -> Any:
        ...

    def dtype(self) -> Any:
        ...

    def memory_usage(self, deep: bool = ...) -> Any:
        ...

    def __len__(self) -> Any:
        ...

    names: Any = ...

    def inferred_type(self) -> Any:
        ...

    @property
    def values(self) -> Any:
        ...

    def duplicated(self, keep: str = ...) -> Any:
        ...

    def fillna(
            self, value: Optional[Any] = ...,
            downcast: Optional[Any] = ...) -> None:
        ...

    def dropna(self, how: str = ...) -> Any:
        ...

    def get_level_values(self, level: Any) -> Any:
        ...

    def unique(self, level: Optional[Any] = ...) -> Any:
        ...

    def to_frame(self, index: bool = ..., name: Optional[Any] = ...) -> Any:
        ...

    def to_hierarchical(self, n_repeat: Any, n_shuffle: int = ...) -> Any:
        ...

    def to_flat_index(self) -> Any:
        ...

    def is_lexsorted(self) -> Any:
        ...

    def lexsort_depth(self) -> Any:
        ...

    def remove_unused_levels(self) -> Any:
        ...

    @property
    def nlevels(self) -> Any:
        ...

    @property
    def levshape(self) -> Any:
        ...

    def __reduce__(self) -> Any:
        ...

    def __getitem__(self, key: Any) -> Any:
        ...

    def take(
            self, indices: Any, axis: int = ..., allow_fill: bool = ...,
            fill_value: Optional[Any] = ..., **kwargs: Any) -> Any:
        ...

    def append(self, other: Any) -> Any:
        ...

    def argsort(self, *args: Any, **kwargs: Any) -> Any:
        ...

    def repeat(self, repeats: Any, axis: Optional[Any] = ...) -> Any:
        ...

    def swaplevel(self, i: int = ..., j: int = ...) -> Any:
        ...

    def reorder_levels(self, order: Any) -> Any:
        ...

    def __getslice__(self, i: Any, j: Any) -> Any:
        ...

    def get_indexer_non_unique(self, target: Any) -> Any:
        ...

    def reindex(
            self, target: Any, method: Optional[Any] = ...,
            level: Optional[Any] = ..., limit: Optional[Any] = ...,
            tolerance: Optional[Any] = ...) -> Any:
        ...

    def slice_locs(
            self, start: Optional[Any] = ..., end: Optional[Any] = ...,
            step: Optional[Any] = ...,
            kind: Optional[Any] = ...) -> Any:
        ...

    def get_loc_level(
            self, key: Any, level: int = ...,
            drop_level: bool = ...) -> Any:
        ...

    def get_locs(self, seq: Any) -> Any:
        ...

    def truncate(
            self, before: Optional[Any] = ...,
            after: Optional[Any] = ...) -> Any:
        ...

    def equals(self, other: Any) -> Any:
        ...

    def equal_levels(self, other: Any) -> Any:
        ...

    def astype(self, dtype: Any, copy: bool = ...) -> Any:
        ...

    def insert(self, loc: Any, item: Any) -> Any:
        ...

    def delete(self, loc: Any) -> Any:
        ...

    def isin(self, values: Any, level: Optional[Any] = ...) -> Any:
        ...


def _sparsify(label_list: Any, start: int = 0, sentinel: str = "") -> Any:
    ...
