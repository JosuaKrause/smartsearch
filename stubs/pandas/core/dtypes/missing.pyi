# Stubs for pandas.core.dtypes.missing (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.
# pylint: disable=unused-argument,redefined-outer-name,invalid-name
# pylint: disable=relative-beyond-top-level,arguments-differ
# pylint: disable=no-member,too-few-public-methods,keyword-arg-before-vararg
# pylint: disable=super-init-not-called,abstract-method,redefined-builtin
# pylint: disable=unused-import,useless-import-alias

from typing import Any

from .common import _NS_DTYPE as _NS_DTYPE
from .common import _TD_DTYPE as _TD_DTYPE
from .common import ensure_object as ensure_object
from .common import is_bool_dtype as is_bool_dtype
from .common import is_complex_dtype as is_complex_dtype
from .common import is_datetime64_dtype as is_datetime64_dtype
from .common import is_datetime64tz_dtype as is_datetime64tz_dtype
from .common import is_datetimelike as is_datetimelike
from .common import is_datetimelike_v_numeric as is_datetimelike_v_numeric
from .common import is_dtype_equal as is_dtype_equal
from .common import is_extension_array_dtype as is_extension_array_dtype
from .common import is_float_dtype as is_float_dtype
from .common import is_integer_dtype as is_integer_dtype
from .common import is_object_dtype as is_object_dtype
from .common import is_period_dtype as is_period_dtype
from .common import is_scalar as is_scalar
from .common import is_string_dtype as is_string_dtype
from .common import is_string_like_dtype as is_string_like_dtype
from .common import is_timedelta64_dtype as is_timedelta64_dtype
from .common import needs_i8_conversion as needs_i8_conversion
from .common import pandas_dtype as pandas_dtype
from .generic import ABCDatetimeArray as ABCDatetimeArray
from .generic import ABCExtensionArray as ABCExtensionArray
from .generic import ABCGeneric as ABCGeneric
from .generic import ABCIndexClass as ABCIndexClass
from .generic import ABCMultiIndex as ABCMultiIndex
from .generic import ABCSeries as ABCSeries
from .generic import ABCTimedeltaArray as ABCTimedeltaArray
from .inference import is_list_like


isposinf_scalar: Any
isneginf_scalar: Any


def isna(obj: Any) -> Any:
    ...


isnull = isna


def notna(obj: Any) -> Any:
    ...


notnull = notna


def array_equivalent(left: Any, right: Any, strict_nan: bool = ...) -> Any:
    ...


def na_value_for_dtype(dtype: Any, compat: bool = ...) -> Any:
    ...


def remove_na_arraylike(arr: Any) -> Any:
    ...


def is_valid_nat_for_dtype(obj: Any, dtype: Any) -> Any:
    ...
